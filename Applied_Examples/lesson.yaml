- Class: meta
  Course: Regular Expressions
  Lesson: Applied Examples
  Author: Jon Calder
  Type: Standard
  Organization: N/A
  Version: 2.4.2

- Class: text
  Output: This lesson provides a few practical real world use cases which should 
    illustrate how the concepts introduced in the previous lessons can be 
    combined to create powerful patterns for regular expressions.
    
- Class: text
  Output: In each of the following questions you should provide your answer in 
    the form, pattern = "<regular expression>", or alternatively, simply as 
    "<regular expression>". Note that all regex patterns should begin with '^' 
    and end with '$' (i.e. you can assume that you are looking for the relevant 
    text on a line by line basis and not within a line of text).
    
- Class: text
  Output: Remember that at any time you can type 'play()', which will pause 
    swirl and free you up to experiment in the R console and work things out. 
    When you are ready to continue just type 'nxt()' and you can continue with 
    these questions. If you get stuck on a question and want to move on simply 
    type 'skip()'.
  
- Class: cmd_question
  Output: Let's begin with a relatively simple example. Provide a regular 
    expression that will match any natural (non-negative integer) number i.e. 0, 
    1, 2, 3, 4, etc.
  CorrectAnswer: pattern = "^[0-9]+$"
  AnswerTests: regex_test(patternExpr = "^[0-9]+$", testVector = positive_integer_examples)
  Hint: "^[___]+$"
  
- Class: cmd_question
  Output: Now adapt the pattern to match any positive or negative integer 
    number, but not zero.
  CorrectAnswer: pattern = "^-?[1-9][0-9]*$"
  AnswerTests: regex_test(patternExpr = "^-?[1-9][0-9]*$", testVector = integer_examples)
  Hint: "^-?[___][___]*$"
  
- Class: cmd_question
  Output: Can you find a pattern which matches any string representation of a 
    year between (and inclusive of) "1900" and "2099"?
  CorrectAnswer: pattern = "^(19|20)[0-9]{2}$"
  AnswerTests: regex_test(patternExpr = "^(19|20)[0-9]{2}$", testVector = year_examples)
  Hint: pattern = "^(__|__)[___]{_}$"
    
- Class: cmd_question
  Output: Come up with a regular expression which checks whether a username is 
    valid. In order to be valid, a username must be between 6 and 16 characters 
    in length and contain only upper or lower case (English) letters, 
    underscores, or hyphens.
  CorrectAnswer: pattern = "^[A-z0-9_-]{6,16}$"
  AnswerTests: regex_test(patternExpr = "^[A-z0-9_-]{6,16}$", testVector = username_examples)
  Hint: pattern = "^[]{,}$"
  
- Class: cmd_question
  Output: Come up with a regular expression which checks whether the entered 
    value is a (valid) hex value. In order to be valid, a hex value must be 
    either 3 or 6 characters in length, and can contain only numbers or the 
    lowercase letters a-f. The value may optionally be prefixed by a '#' in 
    which case it should be 4 or 7 characters in length.
  CorrectAnswer: pattern = "^#?([a-f0-9]{6}|[a-f0-9]{3})$"
  AnswerTests: regex_test(patternExpr = "^#?([a-f0-9]{6}|[a-f0-9]{3})$", testVector = hex_examples)
  Hint: pattern = "^[___]?([___]{_}|[___]{_})$"

- Class: text
  Output: Now for the next challenge, let's see if you can produce a regular 
    expression which matches an e-mail address. In reality, the validation rules 
    for e-mail addresses are actually quite complex, so to keep things 
    manageable, we'll use a slightly simpler set of rules here which should 
    still be fairly representative (and would cover most valid e-mail addresses 
    in practice).

- Class: cmd_question
  Output: For our purposes here, let's assume that a valid e-mail address should 
    begin with one or more upper or lowercase letters, numbers, underscores, 
    dots, or hyphens. These should be followed by an "@" sign, and then a domain 
    name. Let's assume that a domain name must be comprised of one or more 
    upper or lowercase letters, numbers, or hyphens, which are then followed by 
    a dot, and then by another two to six characters which should be lower 
    case letters or dots.
  CorrectAnswer: pattern = "^([A-z0-9_\\.-]+)@([A-z0-9-]+)\\.([a-z\\.]{2,6})$"
  AnswerTests: regex_test(patternExpr = "^([A-z0-9_\\.-]+)@([A-z0-9-]+)\\.([a-z\\.]{2,6})$", testVector = email_examples)
  Hint: pattern = "^([___]+)@([___]+)\\.([___]{_,_})$"
  
- Class: text
  Output: Lets move onto something a little more challenging now - web URLs! 
    Note that the rules have again been simplified slightly but should 
    nonetheless be fairly representative of reality apart from some edge cases. 
    You ready? Let's go!
    
- Class: text
  Output: We assume that a valid web URL may begin with "http://", "https://", 
    or neither. After this follows the domain name, which as in the case of the 
    previous email example should consist of one or more upper or lower 
    case letters, numbers, or hypens which are then followed by a dot, and then 
    by another two to six characters which should be lower case letters or dots. 
    Following that is an optional directory/file section which we simplify here 
    to be zero or more forward slashes, upper or lower case letters, numbers, 
    underscores, spaces, dots, or hyphens.

- Class: cmd_question
  Output: Match the web URL structure described above with a suitable regex 
    pattern.
  CorrectAnswer: pattern = "^(https?:\\/\\/)?([0-9A-z\\.-]+)\\.([a-z\\.]{2,6})[\\/ A-z0-9_\\.-]*$"
  AnswerTests: regex_test(patternExpr = "^(https?:\\/\\/)?([0-9A-z\\.-]+)\\.([a-z\\.]{2,6})[\\/ A-z0-9_\\.-]*$", testVector = url_examples)
  Hint: pattern = "^(https?:\\/\\/)?([___]+)\\.([___]{_,_})[___]*$"
  
- Class: cmd_question
  Output: Come up with a regular expression which checks whether a given 
    password is valid. In order to be valid, a password should be between 6 and 
    18 characters in length, and should contain at least 1 hash "#", dash "-" or 
    underscore "_", 1 lowercase letter, 1 uppercase letter and 1 number. Note 
    that you'll need to use lookaheads to match this neatly in a single 
    regular expression, so you can assume that 'perl = TRUE'.
  CorrectAnswer: pattern = "^(?=.*[\\#\\-_])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])([A-z0-9\\#\\-_]{6,18})$"
  AnswerTests: regex_test(patternExpr = "^(?=.*[\\#\\-_])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])([A-z0-9\\#\\-_]{6,18})$", testVector = password_examples, usePerl = TRUE)
  Hint: pattern = "^(?=.*[])(?=.*[])(?=.*[])(?=.*[])([]{6,18})$"  

- Class: mult_question
  Output: Are you happy to submit the log of this lesson to the course author 
    via Google Forms? The log indicates which questions were attempted multiple 
    times, skipped or correctly answered. This information will be used to 
    identify problematic questions and make improvements. The data will be 
    automatically populated in encoded form - all you need to do is click 
    'Submit'.
  AnswerChoices: Yes (will take you to the Google Form); No, not willing to help.
  CorrectAnswer: Yes (will take you to the Google Form)
  AnswerTests: submit_log()
  Hint: Any response will be accepted.
