- Class: meta
  Course: Regular Expressions
  Lesson: Quantifiers
  Author: Jon
  Type: Standard
  Organization: N/A
  Version: 2.4.2

- Class: text
  Output: This lesson will focus on the use of quantifiers in regular 
    expressions. Quantifiers are used to indicate characters or collections of 
    characters which may be repeated in the search pattern.
    
- Class: text
  Output: The core perspective for quantifiers is very simple, but there is also
    a more advanced perspective which is important to grasp in order to gain a 
    proper understanding of how quantifiers work. We will focus on the basics 
    for now, and then progress on to the more advanced underpinnings in the 
    latter part of the lesson.
    
- Class: text
  Output: A regex quantifier tells the regex engine to match a certain quantity 
    of the character or subexpression immediately to its left. The "+" 
    quantifier indicates a match of one or more times. For example, the pattern 
    "a+" will match the text strings "apples" and "aaa" since both strings 
    contain at least one "a". 
    
- Class: text
  Output: In the case of a pattern such as "abc+abx", the quantifier 
    only applies to the character immediately to it's left (i.e. the "c"), so 
    that this pattern would match "abcccccabx" but not "abcabcabx". By contrast, 
    in the case of a pattern like "(abc)+abx", the quantifier applies to the 
    sub-expression "(abc)" and thus this pattern would match "abcabcabx" but not 
    "abcccccabx".

- Class: mult_question
  Output: Which of the below strings would be matched by the pattern "xyz(abc)+xyz"?
  AnswerChoices: xyzxyz;xyzcxyz;xyzabcabcxyz;xyzabc
  CorrectAnswer: xyzabcabcxyz
  AnswerTests: omnitest(correctVal="xyzabcabcxyz")
  Hint: The quantifier is applied to the expression within parentheses.
  
- Class: mult_question
  Output: The "?" quantifier indicates a match of either 0 or 1 occurrences. For
    example, the pattern "Could be 10? or 20?" would match the strings 
    "Could be 1 or 2" and "Could be 10 or 20". Which other string(s) would 
    also be matched by this pattern?
  AnswerChoices: Could be 10 or 2 and Could be 1 or 20; Could be 100 or 200; Could be  or 
  CorrectAnswer: Could be 10 or 2 and Could be 1 or 20
  AnswerTests: omnitest(correctVal="Could be 10 or 2 and Could be 1 or 20")
  Hint: The "?" quantifier can match either 0 or 1 occurrences of "0" in both 
    positions within the string.
    
- Class: cmd_question
  Output: The "*" quantifier is essentially like the union of "+" and "?" since 
    it is used to match 0 or more occurrences of a character or 
    sub-expression. Using, the "*" quantifier, provide a pattern which will 
    match the strings "xz", "xyz", "xyyz", "xyyyz", and "xyyyyz".
  CorrectAnswer: pattern = "xy*z"
  AnswerTests: omnitest(correctVal="xy*z")
  Hint: Simply provide the pattern string (e.g. "abc+").
  
- Class: text
  Output: In addition to the above three quantifiers, one can also be a little 
    more specific if necessary. A quantifier of the form "(sub){x,y}" indicates 
    between x and y occurrences of the sub-expression (sub). For example, 
    "a{2,4}" will match any string containing "aa", "aaa" or "aaaa".

- Class: text
  Output: A quantifier of the form "(sub){x,}" will match x or more occurrences 
    of the sub-expression (sub) e.g. "a{2,}" will match strings containing "aa", 
    "aaa", "aaaa", "aaaaa" etc.

- Class: text
  Output: A quantifier of the form "(sub){x}" will match exactly x occurrences 
    of the sub-expression (sub). e.g. "a{3,}" will match strings "aaa".

- Class: mult_question
  Output: What will the output of the following statement be? 
    grepl("ab{3,5}c", c("abc", "abbc","abbbc","abbbbc","abbbbbc","abbbbbbc"))
  AnswerChoices: FALSE FALSE TRUE TRUE TRUE FALSE;
    FALSE TRUE TRUE TRUE TRUE FALSE;
    FALSE FALSE TRUE TRUE TRUE TRUE;
    FALSE FALSE FALSE TRUE FALSE FALSE
  CorrectAnswer: FALSE FALSE TRUE TRUE TRUE FALSE
  AnswerTests: omnitest(correctVal="FALSE FALSE TRUE TRUE TRUE FALSE")
  Hint: The letter "b" should appear between 3 and 5 times.

- Class: text
  Output: When combined with anchors, character classes etc, the above 
    quantifiers provide a lot of power and flexibility. Let's explore a few more
    examples of this now.

# Add a ? to a quantifier to make it ungreedy.

- Class: mult_question
  Output: Are you happy to submit the log of this lesson to the course author 
    via Google Forms? The log indicates which questions were attempted multiple 
    times, skipped or correctly answered. This information will be used to 
    identify problematic questions and make improvements. The data will be 
    automatically populated in encoded form - all you need to do is click 
    'Submit'.
  AnswerChoices: Yes (will take you to the Google Form); No, not willing to help.
  CorrectAnswer: Yes (will take you to the Google Form)
  AnswerTests: submit_log()
  Hint: Any response will be accepted.
