- Class: meta
  Course: Regular Expressions
  Lesson: Introduction
  Author: Jon Calder
  Type: Standard
  Organization: N/A
  Version: 2.4.2

- Class: text
  Output: Welcome to this swirl course on the use of Regular Expressions in R. Regular expressions are an extremely powerful tool which 
    allow one to look for and match specific patterns in a string (or string vector). Regular expressions were originally developed for 
    the Perl language and have since been implemented in many other languages including R.
    
- Class: text
  Output: If you are new to swirl, note that you can leave at any point during a lesson by simply hitting escape. Alternatively type 
    info() in the R console to see navigation options within swirl and swirl lessons.

- Class: text
  Output: In this first lesson we will provide a quick introduction to regular expressions (what they are) by way of a few examples, and 
    provide an overview of the (core) functions in R which leverage regular expressions. Later lessons will explore what kinds of pattern 
    matching are possible by diving into the different building blocks that can be used in the construction of regular expressions and
    seeing how these can be combined to create complex filtering or pattern matching.
    
- Class: text
  Output: Any use of regular expressions involves at least two key parameters. Firstly, the pattern parameter, which defines what type 
    and/or sequence of characters to look for; and secondly the text parameter, which should identify the string content against which 
    to match this pattern. The pattern itself is always provided in the form of a string so will need to be enclosed in quotation marks. 
    For example, the pattern 'am' will match the occurrence of the letter 'a' followed immediately by an 'm', regardless of where in the 
    content string they occur and whether or not there are other characters before the 'a' or after the 'm'.

- Class: mult_question
  Output: If we were to use pattern = 'am' with text = 'Do you like green eggs and ham', would there be a match?
  AnswerChoices: Yes;No
  CorrectAnswer: Yes
  AnswerTests: omnitest(correctVal= 'Yes')
  Hint: Note that the word ham at the end of the text string contains an 'a' followed immediately by an 'm'.

- Class: text
  Output: Note furthermore that regular expressions are case sensitive by default (although we'll see later that one can choose to have 
    R ignore case in regular expressions). This means that with pattern = 'Am' and the same text as the above case there would be no 
    match.

- Class: mult_question
  Output: If we were to use pattern = 'Sam-i-am' with text = 'I do not like them, Sam-I-am. I do not like green eggs and ham.', would 
    there be a match?
  AnswerChoices: Yes;No
  CorrectAnswer: No
  AnswerTests: omnitest(correctVal= 'No')
  Hint: Note the case of the letter 'i' in the pattern and in the text.
  
- Class: mult_question
  Output: If we want to match only the very beginning of the text string, we can include a '^' at the beginning of the pattern string. 
    So for example pattern = '^Sam' would match the text strings 'Sam-I-am' and 'Sam I am', but not the text string 
    'I do not like them, Sam-I-am.' What pattern would match 'I' exclusively at the beginning of the text string?
  AnswerChoices: pattern = 'I';pattern = 'I^'; pattern = '^I' 
  CorrectAnswer: pattern = '^I'
  AnswerTests: omnitest(correctVal= "pattern = '^I'")
  Hint: The '^' must appear at the start of the pattern.

- Class: mult_question
  Output: Similarly if we want to match only the very end of the text string, we can include a '$' at the end of the pattern string. 
    So for example pattern = 'Sam$' would match the text string 'I am Sam', but not the text string 
    'I do not like them, Sam-I-am.' What pattern would match 'I am'exclusively at the end of the text string?
  AnswerChoices: pattern = 'I am';pattern = '$I am'; pattern = 'I am$' 
  CorrectAnswer: pattern = 'I am$'
  AnswerTests: omnitest(correctVal= "pattern = 'I am$'")
  Hint: The '$' must appear at the end of the pattern.

- Class: text
  Output: In base R, there are seven 'primary' functions which leverage the power of regular expressions to achieve slightly different 
    outcomes. They are grep, grepl, regexpr, gregexpr, regexec, sub and gsub. These all use overlapping and/or similar input parameters, 
    and differ mainly in terms of functionality and the type of output they provide.
    
- Class: text
  Output: Note that as with most/all things R, these functions are vectorized. grep, grepl, regexpr, gregexpr and regexec search for 
    matches to the pattern argument within each element of a character vector. sub and gsub leverage regular expressions to facilitate 
    'find and replace' functionality within elements of a character vector. We will now go through an example or two with each function 
    to help you get familiar with them. Some are a little easier to get a handle on quickly, but hopefully over time you will start 
    getting a sense of when you might find each of them useful.

- Class: cmd_question
  Output: To facilitate these examples, an extract from Green Eggs and Ham by the legendary Dr Seuss has been loaded into the object
    'DrSeuss'. Inspect this text extract now using str()
  CorrectAnswer: str(DrSeuss)
  AnswerTests: omnitest(correctExpr = 'str(DrSeuss)')
  Hint: By entering 'str(DrSeuss)', you can inspect the structure of the provided text extract
    
- Class: cmd_question
  Output: By default, grep returns a vector of indices indicating which elements of the 'text' vector match the provided 'pattern'. Use 
    grep(pattern, x) - where x specifies the text (character) vector, to check which lines in the DrSeuss extract contain the phrase 
    'not like'.
  CorrectAnswer: grep('not like', DrSeuss)
  AnswerTests: omnitest(correctExpr = "grep(pattern = 'not like', x = DrSeuss)")
  Hint: Call grep with pattern = 'not like' and x = DrSeuss

- Class: cmd_question
  Output: Using grep with value = TRUE, returns the matching elements of the 'text' vector. Use grep(pattern, x) to see the lines in 
    the DrSeuss extract which contain the phrase 'not like'.
  CorrectAnswer: grep(pattern = 'not like', x = DrSeuss, value = TRUE)
  AnswerTests: omnitest(correctExpr = "grep(pattern = 'not like', x = DrSeuss, value = TRUE)")
  Hint: Call grep just as before but this time include value = TRUE
  
- Class: cmd_question
  Output: grepl is very similar to grep, but instead returns logical output i.e. it returns TRUE or FALSE for each element of the 'text' 
    vector, indicating whether or not the element matches the provided pattern. Use grepl(pattern, x) to see which lines in the DrSeuss 
    extract which contain the phrase 'not like'.
  CorrectAnswer: grepl(pattern = 'not like', x = DrSeuss)
  AnswerTests: omnitest(correctExpr = "grepl(pattern = 'not like', x = DrSeuss)")
  Hint: Call grepl with pattern = 'not like' and x = DrSeuss
  
- Class: cmd_question
  Output: regexpr will return an integer vector of the same length as the 'text' vector, with the number indicating the starting position 
    of the first pattern match within each element (or -1 if there is no match). Use regexpr to find the first occurence of the letter 
    'e' in each line of the DrSeuss extract.
  CorrectAnswer: regexpr(pattern = 'e', text = DrSeuss)
  AnswerTests: omnitest(correctExpr = "regexpr(pattern = 'e', text = DrSeuss)")
  Hint: Call regexpr with pattern = 'e' and text = DrSeuss
  
- Class: cmd_question
  Output: gregexpr is similar to regexpr, except instead of returning an integer vector it will return a list, with each list element 
    indicating the starting positions of all pattern matches within the respective element of the text (or -1 if there is no match). 
    Use gregexpr to find all occurences of the letter 'e' in each line of the DrSeuss extract.
  CorrectAnswer: gregexpr(pattern = 'e', text = DrSeuss)
  AnswerTests: omnitest(correctExpr = "gregexpr(pattern = 'e', text = DrSeuss)")
  Hint: Call gregexpr with pattern = 'e' and text = DrSeuss

- Class: text
  Output: Note that over and above the seven 'primary' functions for regular expressions that we have looked at here, there are of course 
    many other R functions which can take regular expressions as an input parameter e.g. strsplit, list.files, ls, apropos, browseEnv, 
    help.search etc (see the relevant help pages for more information on these functions).None of these will be explored in this course, 
    but should all be easy to make use of once you have a good handle on how to write regular expressions.
